#!/bin/bash
#
# Copyright (C) 2024 BlissLabs
#
# Licensed under the GNU General Public License Version 2 or later.
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.gnu.org/licenses/gpl.html
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
SYSTEM_FS=efs
VER=$(date "+%Y-%m-%d")
ARCH=$(uname -m)
LABEL=BlissOS
AAROPA_LOCATION=
SCRIPT_LOCATION=$(dirname "$(readlink -f "$0")")
BOARD_KERNEL_CMDLINE=

# Function to display help
display_help() {
  cat <<EOF
Copyright (C) 2024 BlissLabs

iso_from_target_files script, original idea from LibreMobileOS, created by BlissLabs.
Given a target-files zipfile, produces an iso image like a standard Android-x86 image.

Usage: iso_from_target_files <options> <input_file_location> <output_file_location>

Options:
--cmdline|-c <string>             Set custom cmdline into grub2 & isolinux config
--system-fs|-s <erofs|squashfs>   Set the system file system to erofs or squashfs (default is erofs)
--label <string>                  Set the label to the provided string
--aaropa-location|-n <path>       Set the location of the aaropa directory
--help|-h                         Display this help message
EOF
  exit 0
}

# Process options
while (("$#")); do
  case "$1" in
  --cmdline | -c)
    BOARD_KERNEL_CMDLINE="$2"
    shift 2
    ;;
  --system-fs | -s)
    if [ -n "$2" ] && [ "$2" == "erofs" ]; then
      SYSTEM_FS="efs"
    elif [ -n "$2" ] && [ "$2" == "squashfs" ]; then
      SYSTEM_FS="sfs"
    fi
    shift 2
    ;;
  --label | -l)
    if [ -n "$2" ]; then
      LABEL="$2"
    fi
    shift 2
    ;;
  --aaropa-location | -n)
    if [ -n "$2" ]; then
      AAROPA_LOCATION="$2"
    fi
    shift 2
    ;;
  --help | -h)
    display_help
    ;;
  *)
    break
    ;;
  esac
done

# Print usage if argument is not enough
if [ $# -lt 2 ]; then
  echo "Usage: iso_from_target_files <options> <input_file_location> <output_file_location>"
  exit 1
fi

# Check for required command that are being used
required_progs=("xorriso" "mkdosfs" "mcopy" "mmd" "mdel" "isohybrid" "mksquashfs" "mkfs.erofs")

for cmd in "${required_progs[@]}"; do
  if ! command -v $cmd >/dev/null 2>&1; then
    echo "$cmd does not exist."
    exit 1
  fi
done

# Process input and output file locations
INPUT_FILE_LOCATION=${@: -2:1}
OUTPUT_FILE_LOCATION=${@: -1}

# Guess aaropa location if not specified
if [ -z "$AAROPA_LOCATION" ]; then
  echo "Try to guess where aaropa is"
  ## out/host/linux-x86/bin/../../../../bootable/aaropa
  AAROPA_LOCATION="${SCRIPT_LOCATION}/../../../../bootable/aaropa"
  if [[ ! -d "$AAROPA_LOCATION" ]]; then
    AAROPA_LOCATION="bootable/aaropa"
    if [[ ! -d "$AAROPA_LOCATION" ]]; then
      echo "Error: aaropa still not found, abort !"
      exit 1
    fi
  fi
fi

# Check if the input is target zip
target_zip_content=(
  "BOOT/cmdline"
  "BOOT/kernel"
  "IMAGES/recovery.img"
  "IMAGES/system.img"
  "RADIO/initrd.img"
)

for content in "${target_zip_content[@]}"; do
  unzip -l $INPUT_FILE_LOCATION | grep $content
  if [ $? -ne 0 ]; then
    echo "Error: target is not a target-files-package"
    exit 1
  fi
done

# Run the command

## Create temp directory to extract stuff
tmp_dir="$(pwd)/.tmp_iso_dir"
rm -rf $tmp_dir # Remove before start to work
mkdir $tmp_dir

## Unzip target files
unzip $INPUT_FILE_LOCATION "${target_zip_content[@]}" -d $tmp_dir

## Move required files to correct places
mv $tmp_dir/BOOT/cmdline $tmp_dir/cmdline.txt
mv $tmp_dir/BOOT/kernel $tmp_dir/kernel
mv $tmp_dir/IMAGES/recovery.img $tmp_dir/ramdisk-recovery.img
mv $tmp_dir/IMAGES/system.img $tmp_dir/system.img
mv $tmp_dir/RADIO/initrd.img $tmp_dir/initrd.img
rm -rf $tmp_dir/BOOT $tmp_dir/IMAGES $tmp_dir/RADIO

## Compress system.img if specificed
if [ "$SYSTEM_FS" == "efs" ]; then
  #Default to lz4hc
  mkdir $tmp_dir/sys_efs && mv $tmp_dir/system.img $tmp_dir/sys_efs
  mkfs.erofs -zlz4hc -C65536 $tmp_dir/system.efs $tmp_dir/sys_efs
  rm -rf $tmp_dir/sys_efs
elif [[ "$SYSTEM_FS" == "sfs" ]]; then
  #Default to zstd
  mksquashfs $tmp_dir/system.img $tmp_dir/system.sfs -noappend -comp zstd
  rm $tmp_dir/system.img
fi

## Copy files from aaropa
cp -t $tmp_dir -r $AAROPA_LOCATION/iso/*

## Editing some config files
# May consider to remove this
sed -i "s|OS_TITLE|$LABEL-$ARCH|" $tmp_dir/boot/grub/grub.cfg
sed -i "s|BlissOSLive|${LABEL}_${VER//-/}|" $tmp_dir/boot/grub/grub.cfg
sed -i "s|CMDLINE|$BOARD_KERNEL_CMDLINE|" $tmp_dir/boot/grub/grub.cfg
sed -i "s|VER|$VER|" $tmp_dir/boot/grub/grub.cfg

## Generate iso file
xorriso -as mkisofs -graft-points --modification-date="$(date +"%Y%m%d%H%M%S"00)" -b boot/grub/i386-pc/eltorito.img \
  -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info --grub2-mbr "$AAROPA_LOCATION/boot_hybrid.img" \
  -hfsplus -apm-block-size 2048 -hfsplus-file-creator-type chrp tbxj /System/Library/CoreServices/.disk_label \
  -hfs-bless-by i /System/Library/CoreServices/boot.efi --efi-boot efi.img -efi-boot-part --efi-boot-image \
  --protective-msdos-label -o "$OUTPUT_FILE_LOCATION" --sort-weight 0 / --sort-weight 1 /boot -V ${LABEL}_${VER//-/} \
  $tmp_dir

# Check if the command was successful
if [ $? -eq 0 ]; then
  echo "Command was successful, file is in $OUTPUT_FILE_LOCATION ."
else
  echo "Command failed, please try again !"
  exit 1
fi

# Remove the work dir regardless of success or failure
rm -rf $tmp_dir
