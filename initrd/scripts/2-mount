# shellcheck shell=ash
# By Shadichy <shadichy.dev@gmail.com>
# Last updated 2024/10/01
#
# License: GNU Public License
# We explicitly grant the right to use the scripts
# with Android-x86 project.
#

handle_fstab_line() {
	local device target type flags

	device=$(find_device "$(eval echo "${1#"#>"}")")
	case "$(grep -w "$device" /proc/filesystems)" in
	nodev*) ;;
	*) if [ -b "$device" ]; then
		device=/dev/block/$(basename "$device")
	else
		device=/mnt/$SRC/$device
		if [ -f "$device" ]; then
			local loop_no
			loop_no=$(setup_loop "$device")
			device=/dev/block/loop$loop_no

			if [ "$2" = /data ]; then
				mknod /dev/block/by-name/userdata b 7 "$loop_no"
			fi
		elif [ -d "$device" ]; then
			local mntpt=$BASE/$2
			[ -d "$mntpt" ] || mkdir -p "$mntpt"
			mount "$device" "$mntpt" --bind

			return $?
		fi
	fi ;;
	esac

	target=$2
	type=$3
	flags=$4

	if [ "$type" ]; then
		case "$type" in
		9p) modprobe 9pnet_virtio ;;
		*) ;;
		esac
	fi

	case "$2" in
	/)
		mount "$device" /android ${type:+ -t $type} ${flags:+ -o $flags}

		# Loop mount system.img
		local _img=/android/system.img
		[ -f $_img ] && mount $_img /android
		;;
	*) sed -i "s|#?$target|$device|g" /tmp/fstab ;;
	esac

}

process_fstab() {
	cp /tmp/fstab.tmp /tmp/fstab

	# shellcheck disable=SC2086
	while read -r line; do
		case "$line" in
		"#>"*) handle_fstab_line $line ;;
		*) ;;
		esac

		# Load modules after mounting root
		if grep -wq / "$line"; then
			load_modules
		fi
	done </tmp/fstab.tmp
}

link_fstab() {
	cat $BASE/fstab.* >>/tmp/fstab
	mount --bind /tmp/fstab $BASE/fstab.*
}
